ylim(-50, 420) +
theme(legend.position = "top") +
ggtitle('Short Chart:  Andre Iguodala (2016 season)') +
theme_minimal()
kevin.shot.chart <- ggplot(data = kevin.durant) +
annotation_custom(court.img, xmin = -250, xmax = 250, ymin = -50, ymax = 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
theme(legend.position = "top") +
ggtitle('Short Chart:  Keven Durant (2016 season)') +
theme_minimal()
all.shot.chart <- ggplot(data = shots.data, aes(x = x, y = y, color = shot_made_flag)) +
annotation_custom(court.img, xmin = -250, xmax = 250, ymin = -50, ymax = 420) +
geom_point() +
ylim(-50, 420) +
facet_wrap(~ name, nrow = 2) +
theme(legend.position = "top", strip.background = NULL, linetype = NULL) +
ggtitle('Short Charts:  GSW (2016 season)')
#Print as PDFs
pdf(file = "./andre.iguodala.shot.chart.pdf", 6.5, 5)
print(andre.shot.chart)
dev.off()
pdf(file = "./stephen.curry.shot.chart.pdf", 6.5, 5)
print(stephen.shot.chart)
dev.off()
pdf(file = "./draymond.green.shot.chart.pdf", 6.5, 5)
print(draymond.shot.chart)
dev.off()
pdf(file = "./kevin.durant.shot.chart.pdf", 6.5, 5)
print(kevin.shot.chart)
dev.off()
pdf(file = "./klay.thompson.shot.chart.pdf", 6.5, 5)
print(klay.shot.chart)
dev.off()
pdf(file = "./gsw.shot.charts.pdf", 8, 7)
print(all.shot.chart)
dev.off()
png(file = "./gsw.shot.charts.pdf", 8, 7, units = "in")
print(all.shot.chart)
dev.off()
#END
theme_set(theme_minimal())
theme_set(theme_minimal())
all.shot.chart <- ggplot(data = shots.data, aes(x = x, y = y, color = shot_made_flag)) +
annotation_custom(court.img, xmin = -250, xmax = 250, ymin = -50, ymax = 420) +
geom_point() +
ylim(-50, 420) +
facet_wrap(~ name, nrow = 2) +
theme(legend.position = "top", strip.background = NULL, linetype = NULL, plot.background = NULL, ) +
ggtitle('Short Charts:  GSW (2016 season)')
all.shot.chart <- ggplot(data = shots.data, aes(x = x, y = y, color = shot_made_flag)) +
annotation_custom(court.img, xmin = -250, xmax = 250, ymin = -50, ymax = 420) +
geom_point() +
ylim(-50, 420) +
facet_wrap(~ name, nrow = 2) +
theme(legend.position = "top", strip.background = NULL, linetype = NULL, plot.background = NULL, ) +
ggtitle('Short Charts:  GSW (2016 season)')
all.shot.chart <- ggplot(data = shots.data, aes(x = x, y = y, color = shot_made_flag)) +
annotation_custom(court.img, xmin = -250, xmax = 250, ymin = -50, ymax = 420) +
geom_point() +
ylim(-50, 420) +
facet_wrap(~ name, nrow = 2) +
theme(legend.position = "top", strip.background = NULL, linetype = NULL, plot.background = NULL, ) +
ggtitle('Short Charts:  GSW (2016 season)')
kevin.shot.chart <- ggplot(data = kevin.durant) +
annotation_custom(court.img, xmin = -250, xmax = 250, ymin = -50, ymax = 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
theme(legend.position = "top", legend.title = "Shot successful?", legend.text = c("Yes","No")) +
ggtitle('Short Chart:  Keven Durant (2016 season)') +
theme_minimal()
kevin.shot.chart <- ggplot(data = kevin.durant) +
annotation_custom(court.img, xmin = -250, xmax = 250, ymin = -50, ymax = 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
theme(legend.position = "top", legend.title = "Shot successful?", legend.text = c("Yes","No")) +
ggtitle('Short Chart:  Keven Durant (2016 season)') +
theme_minimal()
source('~/R/workout1/code/make.shot.charts.script.R')
legend.text?
#Load packages
library("jpeg")
library("grid")
library("ggplot2")
#Set wd for exercise
setwd("C:/Users/RD/Documents/R/workout1/images")
#Load court image
court <- "./nba-court.jpg"
court.img <- rasterGrob(readJPEG(court),
width = unit(1, "npc"),
height = unit(1, "npc"))
#Create shot charts
theme_set(theme_minimal())
klay.shot.chart <- ggplot(data = klay.thompson) +
annotation_custom(court.img, xmin = -250, xmax = 250, ymin = -50, ymax = 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Short Chart:  Klay Thompson (2016 season)') +
theme_minimal()
draymond.shot.chart <- ggplot(data = draymond.green) +
annotation_custom(court.img, xmin = -250, xmax = 250, ymin = -50, ymax = 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Short Chart:  Draymond Green (2016 season)') +
theme_minimal()
stephen.shot.chart <- ggplot(data = stephen.curry) +
annotation_custom(court.img, xmin = -250, xmax = 250, ymin = -50, ymax = 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Short Chart:  Stephen Curry (2016 season)') +
theme_minimal()
andre.shot.chart <- ggplot(data = andre.iguodala) +
annotation_custom(court.img, xmin = -250, xmax = 250, ymin = -50, ymax = 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Short Chart:  Andre Iguodala (2016 season)') +
theme_minimal()
kevin.shot.chart <- ggplot(data = kevin.durant) +
annotation_custom(court.img, xmin = -250, xmax = 250, ymin = -50, ymax = 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Short Chart:  Keven Durant (2016 season)') +
theme_minimal()
all.shot.chart <- ggplot(data = shots.data, aes(x = x, y = y, color = shot_made_flag)) +
annotation_custom(court.img, xmin = -250, xmax = 250, ymin = -50, ymax = 420) +
geom_point() +
ylim(-50, 420) +
facet_wrap(~ name, nrow = 2) +
theme(legend.position = "top", strip.background = NULL, line.type = NULL, plot.background = NULL, legend.title = "Shot Succesful?" ) +
ggtitle('Short Charts:  GSW (2016 season)')
#Print as PDFs
pdf(file = "./andre.iguodala.shot.chart.pdf", 6.5, 5)
print(andre.shot.chart)
dev.off()
pdf(file = "./stephen.curry.shot.chart.pdf", 6.5, 5)
print(stephen.shot.chart)
dev.off()
pdf(file = "./draymond.green.shot.chart.pdf", 6.5, 5)
print(draymond.shot.chart)
dev.off()
pdf(file = "./kevin.durant.shot.chart.pdf", 6.5, 5)
print(kevin.shot.chart)
dev.off()
pdf(file = "./klay.thompson.shot.chart.pdf", 6.5, 5)
print(klay.shot.chart)
dev.off()
pdf(file = "./gsw.shot.charts.pdf", 8, 7)
print(all.shot.chart)
dev.off()
png(file = "./gsw.shot.charts.pdf", 8, 7, units = "in")
print(all.shot.chart)
dev.off()
#END
all.shot.chart <- ggplot(data = shots.data, aes(x = x, y = y, color = shot_made_flag)) +
annotation_custom(court.img, xmin = -250, xmax = 250, ymin = -50, ymax = 420) +
geom_point() +
ylim(-50, 420) +
facet_wrap(~ name, nrow = 2) +
theme(legend.position = "top", strip.background = NULL, line.type = NULL, plot.background = NULL, legend.title = "Shot Succesful?" ) +
ggtitle('Short Charts:  GSW (2016 season)')
png(file = "./gsw.shot.charts.png", 8, 7, units = "in")
print(all.shot.chart)
dev.off()
#END
?getwd()
getwd()
all.shot.chart <- ggplot(data = shots.data, aes(x = x, y = y, color = shot_made_flag)) +
annotation_custom(court.img, xmin = -250, xmax = 250, ymin = -50, ymax = 420) +
geom_point() +
ylim(-50, 420) +
facet_wrap(~ name, nrow = 2) +
theme(legend.position = "top", strip.background = NULL, line.type = NULL, plot.background = NULL) +
ggtitle('Short Charts:  GSW (2016 season)')
png(file = "./gsw.shot.charts.png", 8, 7, units = "in")
print(all.shot.chart)
dev.off()
?png
png(filename = "./gsw.shot.charts.png", 8, 7, units = "in")
print(all.shot.chart)
dev.off()
png(filename = "./gsw.shot.charts.png", 8, 7, units = "in", res = 120)
print(all.shot.chart)
dev.off()
?theme_minimal
knitr::opts_chunk$set(echo = TRUE, error = TRUE)
#' @title cylinder volume
#' @description calculates volume of a cylinder
#' @param x radius, height
#' @return volume
circle.area <- function(radius = 1, height = 1){
vol=pi*(radius^2)*height
return(vol)
}
if (radius<0|height<0){
stop("radius or height can not be negative"
)
}
if (radius < 0|height < 0){
stop("radius or height can not be negative"
)
}
knitr::opts_chunk$set(echo = TRUE, error = TRUE)
#' @title circle area
#' @description calculates area of a circle
#' @param x radius
#' @return area
circle.area <- function(radius = 1){
ar=pi*(radius^2)
return(ar)
}
if (radius<0){
stop("radius can not be negative"
)
}
#' @title cylinder volume
#' @description calculates volume of a cylinder
#' @param x radius, height
#' @return volume
circle.area <- function(radius = 1, height = 1){
vol=pi*(radius^2)*height
return(vol)
}
if (radius < 0|height < 0){
stop("radius or height can not be negative"
)
}
plot(pressure)
#' @title circle area
#' @description calculates area of a circle
#' @param x radius
#' @return area
circle.area <- function(radius = 1){
if (radius < 0){
stop("radius can not be negative")
}
ar=pi*(radius^2)
return(ar)
}
circle.area(0)
circle.area()
circle.area(-1)
return(volume)
#' @title cylinder surface area
#' @description calculates surface area of a cylinder
#' @param x radius, height
#' @return surface area
cylinder.area <- function(radius = 1, height = 1){
if (radius < 0){
stop("radius can not be negative")
}
else if (height < 0){
stop("height can not be negative")
}
area=2*pi*radius*height + 2*(radius^2)*pi
return(area)
}
#' @title cylinder volume
#' @description calculates volume of a cylinder
#' @param x radius, height
#' @return volume
cylinder.volume <- function(radius = 1, height = 1){
if (radius < 0){
stop("radius can not be negative")
}
else if (height < 0){
stop("height can not be negative")
}
volume=2*circle.area(radius)*height
return(volume)
}
cylinder.volume(-1,2)
cylinder.volume()
is.even <- function(n){
if (is.numeric(n) == FALSE)
stop("Not a number")
}
even <- is.integer(n/2)
return(even)
}
is.even <- function(n){
if (is.numeric(n) == FALSE){
stop("Not a number")
}
even <- is.integer(n/2)
return(even)
}
is.even(3)
is.even(0)
is.even <- function(n){
if (is.numeric(n) == FALSE){
return(NA)
}
else if (n <= 0){
stop("Must be strictly positive")
}
even <- is.integer(n/2)
return(even)
}
is.odd <- function(n){
if (n <= 0){
stop("Must be strictly positive")
}
odd <- !is.even(n)
return(odd)
}
is.even(0)
is.odd(3)
is.odd(a))
is.odd(a)
grade <- function(score){
if (score < 0)
stop("score must be a number between 0 and 100")
}
else if (score > 100){
stop("score must be a number between 0 and 100")
}
else if (score < 60){
return("F")
}
else if(score >= 60 & score < 70){
return("D")
}
else if(score >= 70 & score < 80){
return("C")
}
else if(score >= 80 & score < 90){
return("B")
}
else if(score >= 90 & score < 100){
return("A")
}
}
grade <- function(score){
if (score < 0)
stop("score must be a number between 0 and 100")
}
else if (score > 100){
stop("score must be a number between 0 and 100")
}
else if (score < 60){
return("F")
}
else if(score >= 60 & score < 70){
return("D")
}
else if(score >= 70 & score < 80){
return("C")
}
else if(score >= 80 & score < 90){
return("B")
}
else if(score >= 90 & score < 100){
return("A")
}
}
grade <- function(score){
if (score < 0)
stop("score must be a number between 0 and 100")
}
else if (score > 100){
stop("score must be a number between 0 and 100")
}
else if (score < 60){
return("F")
}
else if(score >= 60 & score < 70){
return("D")
}
else if(score >= 70 & score < 80){
return("C")
}
else if(score >= 80 & score < 90){
return("B")
}
else if(score >= 90 & score < 100){
return("A")
}
}
grade <- function(score){
if (score < 0)
stop("score must be a number between 0 and 100")
}
else if (score > 100){
stop("score must be a number between 0 and 100")
}
else if (score < 60){
return("F")
}
else if(score >= 60 & score < 70){
return("D")
}
else if(score >= 70 & score < 80){
return("C")
}
else if(score >= 80 & score < 90){
return("B")
}
else if(score >= 90 & score < 100){
return("A")
}
}
grade <- function(score){
if (score < 0){
stop("score must be a number between 0 and 100")
}
else if (score > 100){
stop("score must be a number between 0 and 100")
}
else if (score < 60){
return("F")
}
else if(score >= 60 & score < 70){
return("D")
}
else if(score >= 70 & score < 80){
return("C")
}
else if(score >= 80 & score < 90){
return("B")
}
else if(score >= 90 & score < 100){
return("A")
}
}
grade(0)
is.even(2)
5%%2
5%%2==0
knitr::opts_chunk$set(echo = TRUE, error = TRUE)
#' @title circle area
#' @description calculates area of a circle
#' @param x radius
#' @return area
circle.area <- function(radius = 1) {
if (radius < 0) {
stop("radius can not be negative")
}
ar = pi * (radius ^ 2)
return(ar)
}
#' @title cylinder surface area
#' @description calculates surface area of a cylinder
#' @param x radius, height
#' @return surface area
cylinder.area <- function(radius = 1, height = 1) {
if (radius < 0) {
stop("radius can not be negative")
}
else if (height < 0) {
stop("height can not be negative")
}
area = 2 * pi * radius * height + 2 * (radius ^ 2) * pi
return(area)
}
#' @title cylinder volume
#' @description calculates volume of a cylinder
#' @param x radius, height
#' @return volume
cylinder.volume <- function(radius = 1, height = 1) {
if (radius < 0) {
stop("radius can not be negative")
}
else if (height < 0) {
stop("height can not be negative")
}
volume <- circle.area(radius) * height
return(volume)
}
is.even <- function(n) {
if (is.numeric(n) == FALSE) {
return(NA)
}
else if (n <= 0) {
stop("Must be strictly positive")
}
return(n %% 2 == 0)
}
is.odd <- function(n) {
if (is.numeric(n) == FALSE) {
return(NA)
}
else if (n <= 0) {
stop("Must be strictly positive")
}
odd <- !is.even(n)
return(odd)
}
grade <- function(score) {
if (score < 0) {
stop("score must be a number between 0 and 100")
}
else if (score > 100) {
stop("score must be a number between 0 and 100")
}
else if (score < 60) {
return("F")
}
else if (score >= 60 & score < 70) {
return("D")
}
else if (score >= 70 & score < 80) {
return("C")
}
else if (score >= 80 & score < 90) {
return("B")
}
else if (score >= 90 & score < 100) {
return("A")
}
}
is.even(3)
is.even(2)
